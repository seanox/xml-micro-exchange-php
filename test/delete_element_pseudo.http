# Test sequence for deleting of pseudo elements in the storage.

# DELETE deletes elements and attributes in the storage.
# The position for deletion  is defined via an XPath.
# XPath uses different notations for elements and attributes.

###
# Storage is not establish
# Round brackets in XPath should not be a problem.
# Expectations:
# - Status code 404 Resource Not Found
DELETE {{service}}(/books/book%5B1%5D)/chapter%5B1%5D::first HTTP/1.0
Storage: {{storage_delete_element_pseudo}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "bab5b43bdc4003975eb37da80e7e8dad");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "f5f6eaf8c3a91c077d3dc9684aa30c7f");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "1a3b8937cde8aa40ce5ffe8d389146ec");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "e24e92218b87cffc8c8aa00c5ef5b3e2");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
# - Storage-Revision: 1/1
# - Storage-Space: 262144/72 bytes
CONNECT {{service}} HTTP/1.0
Storage: {{storage_delete_element_pseudo}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "0fac0bf5eb85f32af856f8d88ce7bf0c");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "3b7266f1c4eacc1f833db58a82672f11");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "eece7445b364079bf7390ad5912594ed");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "c77de025c0f404b3795f43eec143ea87");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "90e5f8a2884ecb0f5669c01376905d97");
});
%}

###
# Preparation of the storage for the tests
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 2/108
# - Storage-Space: 262144/6500 bytes
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PUT {{service}}/books HTTP/1.0
Storage: {{storage_delete_element_pseudo}}
Content-Type: application/xml

<book title="Book-A" a="A" b="A" c="A" d="A">
    <chapter title="Chapter-A-A">
        Text Text 1
        <text title="Text A1"/>
        Text Text 2
        <text title="Text A2"/>
        Text Text 3
        <text title="Text A3"/>
        Text Text 4
    </chapter>
    <chapter title="Chapter-B">
        <text title="Text A4"/>
        <text title="Text A5"/>
        <text title="Text A6"/>
        <text title="Text A7"/>
        <text title="Text A8"/>
        <text title="Text A9"/>
        <text title="Text AA"/>
        <text title="Text AB"/>
        <text title="Text AC"/>
        <text title="Text AD"/>
        <text title="Text AE"/>
        <text title="Text AF"/>
    </chapter>
</book>
<book title="Book-B" a="B" b="B" c="B" d="B">
<chapter title="Chapter-B-A">
    <text title="Text B1"/>
    <text title="Text B2"/>
    <text title="Text B3"/>
</chapter>
<chapter title="Chapter-B-B">
    <text title="Text B4"/>
    <text title="Text B5"/>
    <text title="Text B6"/>
    <text title="Text B7"/>
    <text title="Text B8"/>
    <text title="Text B9"/>
    <text title="Text BA"/>
    <text title="Text BB"/>
    <text title="Text BC"/>
    <text title="Text BD"/>
    <text title="Text BE"/>
    <text title="Text BF"/>
</chapter>
</book>
<book title="Book-C" a="C" b="C" c="C" d="C">
<chapter title="Chapter-C-A">
    <text title="Text C1"/>
    <text title="Text C2"/>
    <text title="Text C3"/>
</chapter>
<chapter title="Chapter-C-B">
    <text title="Text C4"/>
    <text title="Text C5"/>
    <text title="Text C6"/>
    <text title="Text C7"/>
    <text title="Text C8"/>
    <text title="Text C9"/>
    <text title="Text CA"/>
    <text title="Text CB"/>
    <text title="Text CC"/>
    <text title="Text CD"/>
    <text title="Text CE"/>
    <text title="Text CF"/>
</chapter>
</book>
<book title="Book-D" a="D" b="D" c="D" d="D">
<chapter title="Chapter-D-A">
    <text title="Text D1"/>
    <text title="Text D2"/>
    <text title="Text D3"/>
</chapter>
<chapter title="Chapter-D-B">
    <text title="Text D4"/>
    <text title="Text D5"/>
    <text title="Text D6"/>
    <text title="Text D7"/>
    <text title="Text D8"/>
    <text title="Text D9"/>
    <text title="Text DA"/>
    <text title="Text DB"/>
    <text title="Text DC"/>
    <text title="Text DD"/>
    <text title="Text DE"/>
    <text title="Text DF"/>
</chapter>
</book>
<book title="Book-E" a="E" b="E" c="E" d="E">
<chapter title="Chapter-E-A">
    <text title="Text E1"/>
    <text title="Text E2"/>
    <text title="Text E3"/>
</chapter>
<chapter title="Chapter-E-B">
    <text title="Text E4"/>
    <text title="Text E5"/>
    <text title="Text E6"/>
    <text title="Text E7"/>
    <text title="Text E8"/>
    <text title="Text E9"/>
    <text title="Text EA"/>
    <text title="Text EB"/>
    <text title="Text EC"/>
    <text title="Text ED"/>
    <text title="Text EE"/>
    <text title="Text EF"/>
</chapter>
</book>
<book title="Book-F" a="F" b="F" c="F" d="F">
<chapter title="Chapter-F-A">
    <text title="Text F1"/>
    <text title="Text F2"/>
    <text title="Text F3"/>
</chapter>
<chapter title="Chapter-F-B">
    <text title="Text F4"/>
    <text title="Text F5"/>
    <text title="Text F6"/>
    <text title="Text F7"/>
    <text title="Text F8"/>
    <text title="Text F9"/>
    <text title="Text FA"/>
    <text title="Text FB"/>
    <text title="Text FC"/>
    <text title="Text FD"/>
    <text title="Text FE"/>
    <text title="Text FF"/>
</chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4bd05ace5a00af112d25bd18b9b5e0d0");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "122d5c0d57a19893e543a9bdb24f8edd");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "f040783b2c49f15f09392bbe4d3c7ac9");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "d700a039dddb13a1feb122e9025552b4");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "fef19fe2c3a620a76c0981a5e61c6439");
});
%}

###
# Delete the first element in all chapters.
# Because of the request body when putting, the first element is always a text
# element with line break. Therefore there are no Deletes in the
# Storage-Effects header.
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 3/12
# - Storage-Space: 262144/5867 bytes
# - Storage: In all chapters the first text entry was deleted
DELETE {{service}}(/books/book)/chapter::first HTTP/1.0
Storage: {{storage_delete_element_pseudo}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "3d3dc0ad8f07f662eee49fdf33aa31cd");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "f5f6eaf8c3a91c077d3dc9684aa30c7f");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "05572025f71f6570f1bdcd0124060efd");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "38126999481cd39b6a20c16c20d682d9");
});
%}

###
# In the second delete pass, elements are also included and thus
# The syntax of pseudo elements is case-insentive
# Storage-Effects header also contains delete entries.
# Expectations:
# - Status code 204 No Content
# - Storage-Revision: 4/12
# - Storage-Space: 262144/5216 bytes
# - Storage: In all chapters the first text entry was deleted
DELETE {{service}}(/books/book)/chapter::firsT HTTP/1.0
Storage: {{storage_delete_element_pseudo}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Request-Hash") === "4c96c67e7833cdaa7b16c278e2392790");
    client.assert(response.headers.valueOf("Trace-Request-Header-Hash") === "f5f6eaf8c3a91c077d3dc9684aa30c7f");
    client.assert(response.headers.valueOf("Trace-Request-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Response-Hash") === "64f43500716633427b914befe29c8f49");
    client.assert(response.headers.valueOf("Trace-Response-Header-Hash") === "b59b281cfd439b4a4b13f64973df332a");
    client.assert(response.headers.valueOf("Trace-Response-Data-Hash") === "d41d8cd98f00b204e9800998ecf8427e");
    client.assert(response.headers.valueOf("Trace-Storage-Hash") === "b05ff3ed95c8197e7c32ddcd7bfa903e");
});
%}
