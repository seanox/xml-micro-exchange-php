# Test sequence for storing XML structures into storage using pseudo elements.
# Pseudo elements serve as relative navigation to elements that are addressed
# by XPath: BEFORE AFTER FIRST LAST
# They are used to relativize the position of an element.

# PUT creates elements and attributes in storage and/or changes the value
# of existing ones.
# The position for the insert is defined via an XPath.
# XPath uses different notations for elements and attributes.

###
# Storage is not establish
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/books/book%5B1%5D::before HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xml

<before id="beforeA"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5c9073d2b307edecdb8fce6f9649f9c4");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_put_element_pseudo}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "44dd58736d5c233219c82f8ae0c1dacd");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 4x UID-A 1x UID-M
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xml

<book title="A2"/>
<book title="B2"/>
<book title="C2"/>
<book title="D2"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c3d1ecbf7bdbb86d2d29d3dc119713bc");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 3x UID-A 1x UID-M
# - before-elements are put in /books before first book (order A,B,C)
PUT {{service}}/books/book%5B1%5D::before HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xml

<before id="beforeA"/>
<before id="beforeB"/>
<before id="beforeC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "7d3dd16e52b3eb57c642c46af26664dc");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 3x UID-A 1x UID-M
# - after-elements are put in /books after last book (order A,B,C)
PUT {{service}}/books/book%5Blast()%5D::after HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xml

<after id="afterA"/>
<after id="afterB"/>
<after id="afterC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9c1c11a7ce86116c5c3709f025361d5a");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 3x UID-A 1x UID-M
# - first-elements are put in /books as first elements before the existing (order A,B,C)
PUT {{service}}/books::first HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xml

<first id="firstA"/>
<first id="firstB"/>
<first id="firstC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "75b2f27dd3451e1de1300a553f95dafc");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 3x UID-A 1x UID-M
# - last-elements are put in /books as last elements after the existing (order A,B,C)
PUT {{service}}/books::last HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xml

<last id="lastA"/>
<last id="lastB"/>
<last id="lastC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "38cd6c4a184e1e1cc8a4899e8be8dbb6");
});
%}

###
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 3x UID-A 1x UID-M
# - test are put in before all last elements
# - URI: (/books)//last::before
PUT {{service}}282f626f6f6b73292f2f6c6173743a3a6265666f7265 HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6ccb81e3761a2c48dd4601a1f34ccc8d");
});
%}

###
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PUT {{service}}/books::wrong HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "1c91b30df4baa54e8d0e69645a1add86");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
PUT {{service}}/books::before HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2ace8d11838cd988ec1cb7e98b956cf2");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
PUT {{service}}/books::after HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "00e98f864491fd57389be3ad9dc50005");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /*/..::before
PUT {{service}}2f2a2f2e2e3a3a6265666f7265 HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4ff78f1a8838c6ee3a7c880c8844ac9f");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /books/..::before
PUT {{service}}2f626f6f6b732f2e2e3a3a6265666f7265 HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "3e81d70b4e6d3cd2de98878379743949");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/wrong::before HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "43c33364f90f5327583c97ab30862b6a");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/wrong/wrong::before HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xml

<wrong id="wrongA"/>
<wrong id="wrongB"/>
<wrong id="wrongC"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "077384085fdfae05b667d8c4c7114bd0");
});
%}

###
# Pseudo-element first for an empty element should work
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 2x UID (A/M)
# - URI: //*[@id='lastC']::first
PUT {{service}}2f2f2a5b4069643d276c61737443275d3a3a6669727374 HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "593d94500ec3cfc9220e7c8221b41693");
});
%}

###
# Preparation for the next test
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 9x UID-A, 20x UID-D, 1x UID-M
# - Storage-Revision is increased
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Accept-Effects: ALL
Content-Type: application/xml

<book>
  <chapter title="Chapter-X-A">
    <text title="Text X4"/>
    <text title="Text X5"/>
    <text title="Text X6" ___uid="KIC2D3GJ1DWE:35" ___rev="5">
      Text
      <!-- Comment -->
      Text
      <a><b/></a>
      Text
      <c/>
      Text
    </text>
  </chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a9b75c801eeb709360ab8f818dc475a2");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-A, 1x UID-M
# - Storage-Revision is increased
# - Storage: <fist/> after <text title="Text X6"> and before text
PUT {{service}}/books/book/chapter/text%5B3%5D::first HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xml

<first/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2ada9fa763aa537802036bd9103f33e2");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-A, 1x UID-M
# - Storage-Revision is increased
# - Storage: <last/> as last in <text title="Text X6">
PUT {{service}}/books/book/chapter/text%5B3%5D::last HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xml

<last/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6cc8a23faf6d59d014f674bfb972a3e8");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-A, 1x UID-M
# - Storage-Revision is increased
# - Storage: <before/> directly before <a/>
PUT {{service}}/books/book/chapter/text%5B3%5D/a::before HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xml

<before/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "1816d11d8db8fadba4559f87780a6d62");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-A, 1x UID-M
# - Storage-Revision is increased
# - Storage: <after/> directly after <a/>
PUT {{service}}/books/book/chapter/text%5B3%5D/a::after HTTP/1.0
Storage: {{storage_put_element_pseudo}}
Content-Type: application/xml

<after/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "353dffe8d5d3d9f8a3d85615f88313b6");
});
%}

###
