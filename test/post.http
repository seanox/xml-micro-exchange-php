# Test sequence for POST requests.

# POST queries data about XPath axes and functions via transformation.
# For this, an XSLT stylesheet is sent with the request-body, which is
# then applied by the XSLT processor to the data in storage.
# Thus the content type application/xslt+xml is always required.
# The client defines the content type for the output with the output-tag
# and the method-attribute.
# The XPath is optional for this method and is used to limit and preselect
# the data. The processing is strict and does not accept unnecessary
# spaces.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/"/>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "291c59a807c0cd3d4e70429f0ff3401a");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_post}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "cc41ee8e436a8b6b4d76b8dbbbe2d383");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: with a lot of UIDs 
PUT {{service}}/statistic HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xml

<cities>
  <city name="Berlin">
    <districts>
      <district name="Charlottenburg-Wilmersdorf">
        <quarters>
          <quarter name="Charlottenburg" area="10.6" inhabitants="130663" population="12327"/>
          <quarter name="Charlottenburg-Nord" area="6.2" inhabitants="19597" population="3161"/>
          <quarter name="Grunewald" area="22.3" inhabitants="10999" population="493.2"/>
          <quarter name="Halensee" area="1.27" inhabitants="15627" population="12305"/>
          <quarter name="Schmargendorf" area="3.59" inhabitants="22205" population="6185"/>
          <quarter name="Westend" area="13.5" inhabitants="41882" population="3102"/>
          <quarter name="Wilmersdorf" area="7.16" inhabitants="102619" population="14332"/>
        </quarters>
      </district>
      <district name="Friedrichshain-Kreuzberg">
        <quarters>
          <quarter name="Friedrichshain" area="9.78" inhabitants="136035" population="13910"/>
          <quarter name="Kreuzberg" area="10.4" inhabitants="154351" population="14841"/>
        </quarters>
      </district>
      <district name="Lichtenberg">
        <quarters>
          <quarter name="Alt-Hohenschönhausen" area="9.33" inhabitants="48979" population="5250"/>
          <quarter name="Falkenberg" area="3.06" inhabitants="1870" population="611.1"/>
          <quarter name="Fennpfuhl" area="2.12" inhabitants="34074" population="16073"/>
          <quarter name="Friedrichsfelde" area="5.55" inhabitants="53813" population="9696"/>
          <quarter name="Karlshorst" area="6.6" inhabitants="27956" population="4236"/>
          <quarter name="Lichtenberg" area="7.22" inhabitants="41758" population="5784"/>
          <quarter name="Malchow" area="1.54" inhabitants="635" population="412.3"/>
          <quarter name="Neu-Hohenschönhausen" area="5.16" inhabitants="56918" population="11031"/>
          <quarter name="Rummelsburg" area="4.52" inhabitants="25650" population="5675"/>
          <quarter name="Wartenberg" area="6.92" inhabitants="2548" population="368.2"/>
        </quarters>
      </district>
      <district name="Marzahn-Hellersdorf">
        <quarters>
          <quarter name="Biesdorf" area="12.4" inhabitants="28069" population="2264"/>
          <quarter name="Hellersdorf" area="8.1" inhabitants="82109" population="10137"/>
          <quarter name="Kaulsdorf" area="8.81" inhabitants="19408" population="2203"/>
          <quarter name="Mahlsdorf" area="12.9" inhabitants="29360" population="2276"/>
          <quarter name="Marzahn" area="19.5" inhabitants="111021" population="5693"/>
        </quarters>
      </district>
      <district name="Mitte">
        <quarters>
          <quarter name="Gesundbrunnen" area="6.13" inhabitants="95175" population="15526"/>
          <quarter name="Hansaviertel" area="0.53" inhabitants="5926" population="11181"/>
          <quarter name="Mitte" area="10.7" inhabitants="102465" population="9576"/>
          <quarter name="Moabit" area="7.72" inhabitants="80495" population="10427"/>
          <quarter name="Tiergarten" area="5.17" inhabitants="14881" population="2878"/>
          <quarter name="Wedding" area="9.23" inhabitants="86806" population="9405"/>
        </quarters>
      </district>
      <district name="Neukölln">
        <quarters>
          <quarter name="Britz" area="12.4" inhabitants="42796" population="3451"/>
          <quarter name="Buckow" area="6.35" inhabitants="40703" population="6410"/>
          <quarter name="Gropiusstadt" area="2.66" inhabitants="37630" population="14147"/>
          <quarter name="Neukölln" area="11.7" inhabitants="166157" population="14201"/>
          <quarter name="Rudow" area="11.8" inhabitants="42631" population="3613"/>
        </quarters>
      </district>
      <district name="Pankow">
        <quarters>
          <quarter name="Blankenburg" area="6.03" inhabitants="6875" population="1140"/>
          <quarter name="Blankenfelde" area="13.4" inhabitants="2064" population="154"/>
          <quarter name="Buch" area="18.2" inhabitants="16868" population="926.8"/>
          <quarter name="Französisch Buchholz" area="12" inhabitants="21281" population="1773"/>
          <quarter name="Heinersdorf" area="3.95" inhabitants="7869" population="1992"/>
          <quarter name="Karow" area="6.65" inhabitants="19679" population="2959"/>
          <quarter name="Niederschönhausen" area="6.49" inhabitants="31996" population="4930"/>
          <quarter name="Pankow" area="5.66" inhabitants="64945" population="11474"/>
          <quarter name="Prenzlauer Berg" area="11" inhabitants="165003" population="15000"/>
          <quarter name="Rosenthal" area="4.9" inhabitants="9596" population="1958"/>
          <quarter name="Stadtrandsiedlung Malchow" area="5.68" inhabitants="1120" population="197.2"/>
          <quarter name="Weißensee" area="7.93" inhabitants="54032" population="6814"/>
          <quarter name="Wilhelmsruh" area="1.37" inhabitants="8007" population="5845"/>
        </quarters>
      </district>
      <district name="Reinickendorf">
        <quarters>
          <quarter name="Borsigwalde" area="2" inhabitants="6777" population="3389"/>
          <quarter name="Frohnau" area="7.8" inhabitants="16814" population="2156"/>
          <quarter name="Heiligensee" area="10.7" inhabitants="18100" population="1692"/>
          <quarter name="Hermsdorf" area="6.1" inhabitants="16607" population="2722"/>
          <quarter name="Konradshöhe" area="2.2" inhabitants="6004" population="2729"/>
          <quarter name="Lübars" area="5" inhabitants="5203" population="1041"/>
          <quarter name="Märkisches Viertel" area="3.2" inhabitants="40379" population="12618"/>
          <quarter name="Reinickendorf" area="10.5" inhabitants="83909" population="7991"/>
          <quarter name="Tegel" area="33.7" inhabitants="36986" population="1098"/>
          <quarter name="Waidmannslust" area="2.3" inhabitants="10973" population="4771"/>
          <quarter name="Wittenau" area="5.9" inhabitants="24656" population="4179"/>
        </quarters>
      </district>
      <district name="Spandau">
        <quarters>
          <quarter name="Falkenhagener Feld" area="6.88" inhabitants="38759" population="5634"/>
          <quarter name="Gatow" area="10.1" inhabitants="3733" population="369.6"/>
          <quarter name="Hakenfelde" area="20.4" inhabitants="31296" population="1534"/>
          <quarter name="Haselhorst" area="4.73" inhabitants="15663" population="3311"/>
          <quarter name="Kladow" area="14.8" inhabitants="16212" population="1095"/>
          <quarter name="Siemensstadt" area="5.66" inhabitants="12831" population="2267"/>
          <quarter name="Spandau" area="8.03" inhabitants="39560" population="4927"/>
          <quarter name="Staaken" area="10.9" inhabitants="46607" population="4276"/>
          <quarter name="Wilhelmstadt" area="10.4" inhabitants="40536" population="3898"/>
        </quarters>
      </district>
      <district name="Steglitz-Zehlendorf">
        <quarters>
          <quarter name="Dahlem" area="8.39" inhabitants="16929" population="2018"/>
          <quarter name="Lankwitz" area="6.99" inhabitants="43566" population="6233"/>
          <quarter name="Lichterfelde" area="18.2" inhabitants="86206" population="4737"/>
          <quarter name="Nikolassee" area="19.6" inhabitants="16695" population="851.8"/>
          <quarter name="Steglitz" area="6.79" inhabitants="75803" population="11164"/>
          <quarter name="Wannsee" area="23.7" inhabitants="10334" population="436"/>
          <quarter name="Zehlendorf" area="18.8" inhabitants="60538" population="3220"/>
        </quarters>
      </district>
      <district name="Tempelhof-Schöneberg">
        <quarters>
          <quarter name="Friedenau" area="1.65" inhabitants="28263" population="17129"/>
          <quarter name="Lichtenrade" area="10.1" inhabitants="51955" population="5144"/>
          <quarter name="Mariendorf" area="9.38" inhabitants="53094" population="5660"/>
          <quarter name="Marienfelde" area="9.15" inhabitants="32349" population="3535"/>
          <quarter name="Schöneberg" area="10.6" inhabitants="123075" population="11611"/>
          <quarter name="Tempelhof" area="12.2" inhabitants="62248" population="5102"/>
        </quarters>
      </district>
      <district name="Treptow-Köpenick">
        <quarters>
          <quarter name="Adlershof" area="6.11" inhabitants="19934" population="3263"/>
          <quarter name="Altglienicke" area="7.89" inhabitants="29357" population="3721"/>
          <quarter name="Alt-Treptow" area="2.31" inhabitants="12878" population="5575"/>
          <quarter name="Baumschulenweg" area="4.82" inhabitants="18842" population="3909"/>
          <quarter name="Bohnsdorf" area="6.52" inhabitants="11671" population="1790"/>
          <quarter name="Friedrichshagen" area="14" inhabitants="19145" population="1368"/>
          <quarter name="Grünau" area="9.13" inhabitants="6784" population="743"/>
          <quarter name="Johannisthal" area="6.54" inhabitants="19853" population="3036"/>
          <quarter name="Köpenick" area="34.9" inhabitants="66765" population="1913"/>
          <quarter name="Müggelheim" area="22.2" inhabitants="6798" population="306.2"/>
          <quarter name="Niederschöneweide" area="3.49" inhabitants="12850" population="3682"/>
          <quarter name="Oberschöneweide" area="6.18" inhabitants="23500" population="3803"/>
          <quarter name="Plänterwald" area="3.01" inhabitants="11365" population="3776"/>
          <quarter name="Rahnsdorf" area="21.5" inhabitants="9523" population="442.9"/>
          <quarter name="Schmöckwitz" area="17.1" inhabitants="4424" population="258.7"/>
        </quarters>
      </district>
    </districts>
  </city>
</cities>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6553e15432dbd347b278e1d0c5842a08");
});
%}

###
# Valid XSLT without XPath and with output
# Expectations:
# - Status code 200 Success
# - Content-Length: 640
# - Content-Type: application/xslt+xml
# - Content: UTF-8 encodes
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city>	
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "3fd65cb7060ada2f132b5614d42599a5");
});
%}

###
# Valid XSLT without XPath and with output
# Expectations:
# - Status code 200 Success
# - Content-Length: 397
# - Content-Type: application/xslt+xml
# - Only an extract of the data selected by XPath.
# - URI: //district[@name='Lichtenberg']
POST {{service}}2f2f64697374726963745b406e616d653d274c69636874656e62657267275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    <xsl:variable name="district" select="/district/@name"/>  
    <district name="{$district}">
	  <quarters>
	  <xsl:for-each select="//quarter">
	  <xsl:variable name="quarter" select="@name"/>
	    <quarter name="{$quarter}"/>
	  </xsl:for-each>
      </quarters>
	</district>
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f472e4a4f95cead7cb05b7f52f7c58a8");
});
%}

###
# Valid XSLT without XPath and with output
# Expectations:
# - Status code 200 Success
# - Content-Length: 287
# - Content-Type: text/plain
# - Only an extract of the data selected by XPath.
# - URI: //district[@name='Lichtenberg']
POST {{service}}2f2f64697374726963745b406e616d653d274c69636874656e62657267275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text"/>
  <xsl:template match="/">
Quarters of district: <xsl:value-of select="/district/@name"/>  
----
<xsl:for-each select="//quarter">
<xsl:value-of select="concat(format-number(@area, '0.00'), ' km²')"/>
<xsl:text> </xsl:text>
<xsl:value-of select="@name"/><xsl:text>&#13;&#10;</xsl:text>
</xsl:for-each>
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c908f5bd7b2ef503392ad4cc69dbd330");
});
%}

###
# Wrong Content-Type
# Expectations:
# - Status code 415 Unsupported Media Type
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml-x

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city>	
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e8119ad6c2490c838d30467004f71eab");
});
%}

###
# Wrong XSLT markup, xsl:templatex is used instead of xsl:template
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XSLT stylesheet (xsltParseStylesheetTop: unknown templatex element)
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:templatex match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city>	
  </xsl:templatex>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "7476feb2371f751119da0da3a8bc200a");
});
%}

###
# Wrong XSLT markup, xsl:templatex is used and is closed by xsl:template
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XSLT stylesheet (Opening and ending tag mismatch...
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:templatex match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city>	
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "2b904a8af7df4750db75d35b7b2d9540");
});
%}

###
# Wrong XSLT markup, city tag is not closed
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XSLT stylesheet (Opening and ending tag mismatch...
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:templatex match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "0f637eb58d34445a6a7f567bfcdc0503");
});
%}

###
# Wrong XSLT markup, city tag is not closed
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XSLT stylesheet (EndTag: '</' not found)
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:templatex match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d6fcac3381f115123877d27fb0e19e97");
});
%}

###
# Wrong XSLT EL function sumx (does not exists)
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XSLT stylesheet (Failed to evaluate the expression of variable 'area')
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    <xsl:variable name="city" select="//city[@name='Berlin']/@name"/> 
    <xsl:variable name="area" select="sumx(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sumx(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city>	
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d9252666ef77fca1a32946e49ef2bbd0");
});
%}

###
# Wrong XSLT EL in variable: city attribute: select ] is missing
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XSLT stylesheet (XSLT-variable: Failed to compile the XPath expression ...
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    <xsl:variable name="city" select="//city[@name='Berlin'/@name"/> 
    <xsl:variable name="area" select="sum(//city[@name='Berlin']//quarter/@area)"/> 	
    <city name="{$city}" area="{$area}">
      <areas>
      <xsl:for-each select="//city[@name='Berlin']//district">
	    <xsl:sort select="concat(string-length(round(sum(.//quarter/@area))), round(sum(.//quarter/@area)))" order="descending"/>
        <xsl:variable name="district" select="@name"/>
        <xsl:variable name="sum" select="sum(.//quarter/@area)"/>
        <area district="{$district}" sum="{$sum}"/>
      </xsl:for-each>
	  </areas>
    </city>	
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "92d0419946543d9f1ee1060810203d31");
});
%}

###
# Valid XSLT but without output
# Expectations:
# - Status code 200 Success
# - Content-Length: 0
# - Without Content-Type
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/"/>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "df7b1a748261ebad2c6d3189ee1fee01");
});
%}

###
# Valid XSLT but without output
# Expectations:
# - Status code 200 Success
# - Content-Length: 0
# - Without Content-Type
POST {{service}}/statistic/cities/city HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/"/>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "0f837562367bc0dd5dcbc21ccbfdc021");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
POST {{service}}/statistic/cities/unknow HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/"/>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5d4d4637f102888295273cad6fa0ad64");
});
%}

###
# XPath functions are not supported
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath (Functions are not supported)
POST {{service}}name(/statistic) HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/"/>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4197cb52ebb209f42770f1006080fc8c");
});
%}

###
# Invalid XPath /books/book[1]x
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
POST {{service}}/books/book%5B1%5Dx HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/"/>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "7bbd590766bdc0e28b89eccf71003582");
});
%}

###
# POST without Content-Type should be responded with status 415
# Expectations:
# - Status code 415 Unsupported Media Type
POST {{service}} HTTP/1.0
Storage: {{storage_post}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "48d26235057d8b18cf70e1bb2aa02769");
});
%}

###
# POST without response body should be responded with status 422
# Expectations:
# - Status code 422 Unprocessable Entity
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "dd5e5c93fba252ebedcea51e18d796d5");
});
%}

###
# XPath with serveral elements as target should work
# Expectations:
# - Content-Length: 40
# - Content: Count: 2x
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    Count: <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8b766906a699267da51216e4a03101df");
});
%}

###
# XPath with serveral attributes as target should work
# Expectations:
# - Content-Length: 56
# - Content: Names: 12x Areas: 96x
# - URI: //district/@name|//quarter/@area
POST {{service}}2f2f64697374726963742f406e616d657c2f2f717561727465722f4061726561 HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    Names: <xsl:value-of select="count(//name)"/>x
    Areas: <xsl:value-of select="count(//area)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c2f471f38f68bd04ce9781cc66ee7e66");
});
%}

###
# Valid XSLT without XPath and with output
# Text/JSON output, the JSON directive in the URI has an effect.
# Expectations:
# - Status code 200 Success
# - Content-Length: 476
# - Content-Type: application/json
# - Only an extract of the data selected by XPath.
# - URI: //district[@name='Lichtenberg']!json
POST {{service}}2f2f64697374726963745b406e616d653d274c69636874656e62657267275d216a736f6e HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    <xsl:variable name="district" select="/district/@name"/>
    <district name="{$district}">
	  <quarters>
	  <xsl:for-each select="//quarter">
	    <xsl:variable name="quarter" select="@name"/>
	    <quarter name="{$quarter}"/>
	  </xsl:for-each>
      </quarters>
	</district>
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "284b6bc6e3d3b05eaf23124cad6b54c5");
});
%}

###
# Valid XSLT without XPath and with output
# Text/JSON output, the JSON directive in the URI has an effect.
# Expectations:
# - Status code 200 Success
# - Content-Length: 358
# - Content-Type: application/json
# - Only an extract of the data selected by XPath.
# - URI: //district[@name='Lichtenberg']!json
POST {{service}}2f2f64697374726963745b406e616d653d274c69636874656e62657267275d216a736f6e HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text"/>
  <xsl:template match="/">
Quarters of district: <xsl:value-of select="/district/@name"/>
----
<xsl:for-each select="//quarter">
<xsl:value-of select="concat(format-number(@area, '0.00'), ' km²')"/>
<xsl:text> </xsl:text>
<xsl:value-of select="@name"/><xsl:text>&#13;&#10;</xsl:text>
</xsl:for-each>
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "d6319e3fbc0b227c9717b840560db593");
});
%}

###
# Valid XSLT without XPath and with output
# Text output, mix of plain an tags with attributes
# Tags and attributes are not included in the output
# Expectations:
# - Status code 200 Success
# - Content-Length: 373
# - Content-Type: text/plain
# - Only an extract of the data selected by XPath.
# - URI: //district[@name='Lichtenberg']
POST {{service}}2f2f64697374726963745b406e616d653d274c69636874656e62657267275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text"/>
  <xsl:template match="/">
Quarters of district: <xsl:value-of select="/district/@name"/>
----
<xsl:for-each select="//quarter">
<xsl:variable name="area" select="concat(format-number(@area, '0.00'), ' km²')"/>
<xsl:variable name="name" select="@name"/>
<quarter area="1-{$area}-1" name="2-{$name}-2">
3-<xsl:value-of select="$area"/>-3 4-<xsl:value-of select="$name"/>-4
</quarter>
</xsl:for-each>
----
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "0a404c7d075d0174d9358ef686749bbf");
});
%}

###
# Output of a node
# Expectations:
# - Status code 200 Success
# - Content-Length: 91
# - Content-Type: application/xslt+xml
# - Only xml declaration and few empty lines
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    <xsl:value-of select="//district[@name='Mitte']"/>
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "58c3c883813d5b0ec95bfcd1da1f9e6b");
});
%}

###
# Output of a node
# Expectations:
# - Status code 200 Success
# - Content-Length: 91
# - Content-Type: text/plain
# - Only few empty lines
POST {{service}} HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text"/>
  <xsl:template match="/">
    <xsl:value-of select="//district[@name='Mitte']"/>
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "6675e2d72f5088deea5792a9cd27f8bd");
});
%}

###
# Template without output method used the default xml
# The result is not a valid XML-file
# Expectations:
# - Content-Length: 40
# - Content: Count: 2x
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:template match="/">
    Count: <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "96ca64311e45eac378d35fbd6bf450fe");
});
%}

###
# Template with xml output method
# The result is not a valid XML-file
# Expectations:
# - Content-Length: 40
# - Content: Count: 2x
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    Count: <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8b766906a699267da51216e4a03101df");
});
%}

###
# Template with text output method
# Expectations:
# - Content-Length: 5
# - Content-type: text/plain
# - Content: 2x
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text"/>
  <xsl:template match="/">
    <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f2e3644cb205fb53f277501ecb09dd2b");
});
%}

###
# Template with html output method
# Expectations:
# - Content-Length: 18
# - Content-type: text/html;
# - Content: <img src="">2x
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="html"/>
  <xsl:template match="/">
    <img src=""/>
    <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ce0e4a7536aab0387bd3c1753efd9058");
});
%}

###
# Template with invalid output method
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XSLT stylesheet (invalid value for method: xhtml)
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xhtml"/>
  <xsl:template match="/">
    <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ad18f28236a8220c57e9b5d78d88d5d7");
});
%}

###
# Template with invalid output method
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XSLT stylesheet (invalid value for method: unknown)
# - URI: //district[@name='Mitte']|//district[@name='Spandau']
POST {{service}}2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="unknown"/>
  <xsl:template match="/">
    <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "54896983f1b8d0f6a0517826eff2e7be");
});
%}

###
# Template without output method used the default xml
# Text/JSON output, the JSON directive in the URI has an effect.
# The result is not a valid XML-file
# The intermediate transformation to XML, as a precursor to the transformation
# to JSON, will create an empty document, and JSON will also create false
# Expectations:
# - Content-Length: 5
# - Content-Type: application/json
# - Content: false
# - URI: //district[@name='Mitte']|//district[@name='Spandau']!json
POST {{service}}2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d216a736f6e HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:template match="/">
    Count: <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "0131c6334002dae51b327295620515e1");
});
%}

###
# Template with xml output method
# Text/JSON output, the JSON directive in the URI has an effect.
# The result is not a valid XML-file
# The intermediate transformation to XML, as a precursor to the transformation
# to JSON, will create an empty document, and JSON will also create false
# Expectations:
# - Content-Length: 5
# - Content-Type: application/json
# - Content: false
# - URI: //district[@name='Mitte']|//district[@name='Spandau']!json
POST {{service}}2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d216a736f6e HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml"/>
  <xsl:template match="/">
    Count: <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "7728d264a387b0e13ed862f3eaea4d12");
});
%}

###
# Template with text output method
# Text/JSON output, the JSON directive in the URI has an effect.
# The output of the transformation is a text enclosed in a JSON structure
# Expectations:
# - Content-Length: 8
# - Content-Type: application/json
# - Content: "2x\n  "
# - URI: //district[@name='Mitte']|//district[@name='Spandau']!json
POST {{service}}2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d216a736f6e HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="text"/>
  <xsl:template match="/">
    <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "bdfe3d3c0721e8a7c67690fdea67e194");
});
%}

###
# Template with html output method
# Text/HTML output, the JSON directive in the URI has no effect.
# The explicit output of HTML cannot be transformed into JSON.
# Expectations:
# - Content-Length: 18
# - Content-type: text/html;
# - Content: <img src="">2x
# - URI: //district[@name='Mitte']|//district[@name='Spandau']!json
POST {{service}}2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d216a736f6e HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="html"/>
  <xsl:template match="/">
    <img src=""/>
    <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "0688c46d7eab053ac5bd17ef553d33f4");
});
%}

###
# Template with invalid output method
# the JSON directive in the URI has no effect.
# Expectations:
# - Status code 422 Bad Request
# - Message: Invalid XSLT stylesheet (invalid value for method: xhtml)
# - URI: //district[@name='Mitte']|//district[@name='Spandau']!json
POST {{service}}2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d216a736f6e HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xhtml"/>
  <xsl:template match="/">
    <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8750a216c1b16111a6461994f5329c73");
});
%}

###
# Template with invalid output method
# the JSON directive in the URI has no effect.
# Expectations:
# - Status code 422 Unprocessable Entity
# - Message: Invalid XSLT stylesheet (invalid value for method: unknown)
# - URI: //district[@name='Mitte']|//district[@name='Spandau']!json
POST {{service}}2f2f64697374726963745b406e616d653d274d69747465275d7c2f2f64697374726963745b406e616d653d275370616e646175275d216a736f6e HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="unknown"/>
  <xsl:template match="/">
    <xsl:value-of select="count(//district)"/>x
  </xsl:template>
</xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "7051df617104937e898175df3517931d");
});
%}

###
# Test of correct Content-Lengt for unicode
# Expectations:
# - Status code 200 Success
# - Content-Length: 63
# - Content-Type: text/plain
# - Only an extract of the data selected by XPath.
# - URI: //quarter[@area=9.33]
POST {{service}}2f2f717561727465725b40617265613d392e33335d HTTP/1.0
Storage: {{storage_post}}
Content-Type: application/xslt+xml

<?xml version="1.0"?>
<xsl:stylesheet version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"><xsl:output
    method="text"/><xsl:template
    match="/"><xsl:value-of
    select="*/@name"/><xsl:value-of
    select="*/@name"/><xsl:value-of
    select="*/@name"/></xsl:template></xsl:stylesheet>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9dd586e2f9418c8f6b616dcee5324982");
});
%}

###
