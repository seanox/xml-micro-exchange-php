# Test sequence for patching elements in the storage.

# PATCH changes existing elements and attributes in storage.
# The position for the insert is defined via an XPath.
# The method works almost like PUT, but the XPath axis of the request
# always expects an existing target.
# XPath uses different notations for elements and attributes.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xml

<book title="A1"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "482ce7ae4d70db89fb47fb43d374fada");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_patch_element}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4bd505378847a3c267c96b74e055ca08");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 4x UID-A 1x UID-M
# - 4 books are overwritten
# - all new elements have the attributes ___rev and ___uid
PUT {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xml

<book title="A2"/>
<book title="B2"/>
<book title="C2"/>
<book title="D2"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e0e7b377256b10b972887229b747966e");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 9x UID
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xml

<book title="A3">
  <chapter>Text A3</chapter>
</book>
<book title="B3">
  <chapter>Text B3</chapter>
</book>
<book title="C3">
  <chapter>Text C3</chapter>
</book>
<book title="D3">
  <chapter>Text D3</chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "032d5bd8b1e807fadcfa34563112e0b2");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 9x UID
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xml

<book title="A3">
  <chapter><![CDATA[Text A3]]></chapter>
</book>
<book title="B3">
  <chapter><![CDATA[Text B3]]></chapter>
</book>
<book title="C3">
  <chapter><![CDATA[Text C3]]></chapter>
</book>
<book title="D3">
  <chapter><![CDATA[Text D3]]></chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "e92995b58cae3a70f5b4b15fb1b07a15");
});
%}

###
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 8x UID
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PATCH {{service}}(/books/book)/chapter HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "18e0659305e18335521f6eb57b8bfb3b");
});
%}

###
# PATCH outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /books/..
PATCH {{service}}2f626f6f6b732f2e2e HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c342838e7f79a6827f8aa4449ee65ec0");
});
%}

###
# PATCH outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /*/..
PATCH {{service}}2f2a2f2e2e HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c1c1c5a494f7bb47fb124d4a9f045184");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/wrong HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4166302b90a57fcb2e30832c8f8b3ce2");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PATCH {{service}}/wrong/wrong HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "92a27392176b412fcec79d4aed328b0d");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 2x UID
# - xxx was created in the first book
PATCH {{service}}/books/book%5B1%5D HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "88608703bf9bdcc728d15abeff6dfb07");
});
%}

###
# PATCH does not support pseudo elements in XPath
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books/book%5B1%5D::before HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5fbe5a3273ac8da19ef8c40ba34c8d78");
});
%}

###
# PATCH does not support pseudo elements in XPath
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books/book%5B1%5D::after HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8e6a9e88f1c7f7d1216ed8411a431f21");
});
%}

###
# PATCH does not support pseudo elements in XPath
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books::first HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4e314e275ddabe8b3ef5a2d776dbd545");
});
%}

###
# PATCH does not support pseudo elements in XPath
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books::last HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "51c4cc0fbe3a0e590343edc929f195a2");
});
%}

###
# PATCH does not support pseudo elements in XPath
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books::wrong HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "f366a452aa16acd2f8ac9a17e737e069");
});
%}

###
# PATCH does not support XPath functions als axis
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath (Functions are not supported)
# - URI: name(.)
PATCH {{service}}6e616d65282e29 HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9d32cb49397b2096305160361d676ad5");
});
%}

###
# INvalid XPath /books/book[1]x
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
PATCH {{service}}/books/book%5B1%5Dx HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xml

<xxx/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "855b185991af105c657fe8769ef70e89");
});
%}

###
# Preparation of the storage for the tests
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 36x UID-A 1x UID-M
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PUT {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Content-Type: application/xml

<book title="Book-A" a="A" b="A" c="A" d="A">
  <chapter title="Chapter-A-A">
    <text title="Text A1"/>
    <text title="Text A2"/>
    <text title="Text A3"/>
  </chapter>
  <chapter title="Chapter-B">
    <text title="Text A4"/>
    <text title="Text A5"/>
    <text title="Text A6"/>
  </chapter>
</book>
<book title="Book-B" a="B" b="B" c="B" d="B">
  <chapter title="Chapter-B-A">
    <text title="Text B1"/>
    <text title="Text B2"/>
    <text title="Text B3"/>
  </chapter>
  <chapter title="Chapter-B-B">
    <text title="Text B4"/>
    <text title="Text B5"/>
    <text title="Text B6"/>
  </chapter>
</book>
<book title="Book-C" a="C" b="C" c="C" d="C">
  <chapter title="Chapter-C-A">
    <text title="Text C1"/>
    <text title="Text C2"/>
    <text title="Text C3"/>
  </chapter>
  <chapter title="Chapter-C-B">
    <text title="Text C4"/>
    <text title="Text C5"/>
    <text title="Text C6"/>
  </chapter>
</book>
<book title="Book-D" a="D" b="D" c="D" d="D">
  <chapter title="Chapter-D-A">
    <text title="Text D1"/>
    <text title="Text D2"/>
    <text title="Text D3"/>
  </chapter>
  <chapter title="Chapter-D-B">
    <text title="Text D4"/>
    <text title="Text D5"/>
    <text title="Text D6"/>
  </chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b8a4493faad24777366c81ebd69ac0f6");
});
%}

###
# Overwriting an element must work
# The indirectly deleted UIDs must be contained in Storage-Effect
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 8x UID-A, 8x UID-D, 1x UID-M
# - Storage-Revision is increased
PATCH {{service}}/books/book%5B1%5D HTTP/1.0
Storage: {{storage_patch_element}}
Accept-Effects: ALL
Content-Type: application/xml

<chapter title="Chapter-X-A">
  <text title="Text X1"/>
  <text title="Text X2"/>
  <text title="Text X3"/>
</chapter>
<chapter title="Chapter-X-B">
  <text title="Text X4"/>
  <text title="Text X5"/>
  <text title="Text X6"/>
</chapter>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "bc7f14b96a84519979723f3bf411f64e");
});
%}

###
# Recursive patching of all elements by a relative and generous XPath.
# The Storage-Effects must be optimized and obsolete entries must be cleaned up.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 36x UID-D, 1x UID-A, 1x UID-M
# - Storage-Revision is increased
# - URI: //*[@___uid]
PATCH {{service}}2f2f2a5b405f5f5f7569645d HTTP/1.0
Storage: {{storage_patch_element}}
Accept-Effects: ALL
Content-Type: application/xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4c327782e66e1961604609a8edb46a14");
});
%}

###
# Preparation for the next test
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 10x UID-A, 1x UID-D, 1x UID-M
# - Storage-Revision is increased
PATCH {{service}}/books HTTP/1.0
Storage: {{storage_patch_element}}
Accept-Effects: ALL
Content-Type: application/xml

<chapter title="Chapter-X-A">
  <text title="Text X1"/>
  <text title="Text X2"/>
  <text title="Text X3"/>
</chapter>
<chapter title="Chapter-X-B">
  <text title="Text X4"/>
  <text title="Text X5"/>
  <text title="Text X6" ___uid="KIC2D3GJ1DWE:35" ___rev="5">
    Text
    <!-- Comment -->
    Text
    <a><b></b></a>
  </text>
</chapter>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8d5d6bb38a270fb091b6767141381dc8");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-A, 2x UID-D, 1x UID-M
# - Storage-Revision is increased
# - Storage: text title="Text X6" includes only <test/>, comments and text were deleted
PATCH {{service}}/books/chapter%5B2%5D/text%5B3%5D HTTP/1.0
Storage: {{storage_patch_element}}
Accept-Effects: ALL
Content-Type: application/xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "1be1e81fc90dcbef469cb163e52b7d2d");
});
%}

###
