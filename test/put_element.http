# Test sequence for putting of elements into the storage.

# PUT creates elements and attributes in storage and/or changes the value
# of existing ones.
# The position for the insert is defined via an XPath.
# XPath uses different notations for elements and attributes.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_element}}
Content-Type: application/xml

<book title="A1"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "829bd52968239c415e001211b679bb4e");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_put_element}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "48487d5f47e4d8e2389e22b544618a27");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 4x UID-A 1x UID-M
# - 4 books are overwritten
# - all new elements have the attributes ___rev and ___uid
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_element}}
Content-Type: application/xml

<book title="A2"/>
<book title="B2"/>
<book title="C2"/>
<book title="D2"/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c0425f6f0ab51628df9ea31c17673c46");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 8x UID-A 1x UID-M
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_element}}
Content-Type: application/xml

<book title="A3">
  <chapter>Text A3</chapter>
</book>
<book title="B3">
  <chapter>Text B3</chapter>
</book>
<book title="C3">
  <chapter>Text C3</chapter>
</book>
<book title="D3">
  <chapter>Text D3</chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "1e82f1c7e4af29efcee92c3877320113");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 8x UID-A 1x UID-M
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_element}}
Content-Type: application/xml

<book title="A3">
  <chapter><![CDATA[Text A3]]></chapter>
</book>
<book title="B3">
  <chapter><![CDATA[Text B3]]></chapter>
</book>
<book title="C3">
  <chapter><![CDATA[Text C3]]></chapter>
</book>
<book title="D3">
  <chapter><![CDATA[Text D3]]></chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a18e006b357e220d46eb158a10da1f0b");
});
%}

###
# Use of brackets should not be a problem
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 4x UID-A 4x UID-M
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PUT {{service}}(/books/book)/chapter HTTP/1.0
Storage: {{storage_put_element}}
Content-Type: application/xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b0dba7bde13100ea5627b799b06e8434");
});
%}

###
# PUT does not support XPath functions als axis
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath (Functions are not supported)
# - URI: name(.)
PUT {{service}}6e616d65282e29 HTTP/1.0
Storage: {{storage_put_element}}
Content-Type: application/xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a623c677a49fe9fc244061db86aa2abd");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
# - URI: /books/..
PUT {{service}}2f626f6f6b732f2e2e HTTP/1.0
Storage: {{storage_put_element}}
Content-Type: application/xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b2cb86519b245df449f597ffb191a617");
});
%}

###
# PUT outside the root element, shall be ignored
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects
# - No changes in the storage
# - Storage-Revision is not increased
#- URI: /*/..
PUT {{service}}2f2a2f2e2e HTTP/1.0
Storage: {{storage_put_element}}
Content-Type: application/xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "815a5903cd72b91f86acde0796432fa1");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/wrong HTTP/1.0
Storage: {{storage_put_element}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4239ce4710733b415e443b7464b15055");
});
%}

###
# XPath without target
# Expectations:
# - Status code 404 Resource Not Found
PUT {{service}}/wrong/wrong HTTP/1.0
Storage: {{storage_put_element}}
Content-Type: text/plain

123456789ABCDEF

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9291fadf270e4aae50644d824d7f2a55");
});
%}

###
# Preparation of the storage for the tests
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 36x UID-A 1x UID-M
# - 4 books are overwritten
# - 4 books with chapter are created
# - all new elements have the attributes ___rev and ___uid
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_element}}
Content-Type: application/xml

<book title="Book-A" a="A" b="A" c="A" d="A">
  <chapter title="Chapter-A-A">
    <text title="Text A1"/>
    <text title="Text A2"/>
    <text title="Text A3"/>
  </chapter>
  <chapter title="Chapter-B">
    <text title="Text A4"/>
    <text title="Text A5"/>
    <text title="Text A6"/>
  </chapter>
</book>
<book title="Book-B" a="B" b="B" c="B" d="B">
  <chapter title="Chapter-B-A">
    <text title="Text B1"/>
    <text title="Text B2"/>
    <text title="Text B3"/>
  </chapter>
  <chapter title="Chapter-B-B">
    <text title="Text B4"/>
    <text title="Text B5"/>
    <text title="Text B6"/>
  </chapter>
</book>
<book title="Book-C" a="C" b="C" c="C" d="C">
  <chapter title="Chapter-C-A">
    <text title="Text C1"/>
    <text title="Text C2"/>
    <text title="Text C3"/>
  </chapter>
  <chapter title="Chapter-C-B">
    <text title="Text C4"/>
    <text title="Text C5"/>
    <text title="Text C6"/>
  </chapter>
</book>
<book title="Book-D" a="D" b="D" c="D" d="D">
  <chapter title="Chapter-D-A">
    <text title="Text D1"/>
    <text title="Text D2"/>
    <text title="Text D3"/>
  </chapter>
  <chapter title="Chapter-D-B">
    <text title="Text D4"/>
    <text title="Text D5"/>
    <text title="Text D6"/>
  </chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "95f9c2aca7da9fe6424ce802bd514bd3");
});
%}

###
# Overwriting an element must work
# The indirectly deleted UIDs must be contained in Storage-Effect
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 8x UID-A, 8x UID-D, 1x UID-M
# - Storage-Revision is increased
PUT {{service}}/books/book%5B1%5D HTTP/1.0
Storage: {{storage_put_element}}
Accept-Effects: ALL
Content-Type: application/xml

<chapter title="Chapter-X-A">
  <text title="Text X1"/>
  <text title="Text X2"/>
  <text title="Text X3"/>
</chapter>
<chapter title="Chapter-X-B">
  <text title="Text X4"/>
  <text title="Text X5"/>
  <text title="Text X6"/>
</chapter>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "9a01ccbf77f059742324d47c56d31e29");
});
%}

###
# Recursive putting of all elements by a relative and generous XPath.
# The Storage-Effects must be optimized and obsolete entries must be cleaned up.
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 36x UID-D, 1x UID-A, 1x UID-M
# - Storage-Revision is increased
# - URI: //*[@___uid]
PUT {{service}}2f2f2a5b405f5f5f7569645d HTTP/1.0
Storage: {{storage_put_element}}
Accept-Effects: ALL
Content-Type: application/xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "0de2f23ecbc1c486349d2f538bc300e8");
});
%}

###
# Preparation for the next test
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 10x UID-A, 1x UID-D, 1x UID-M
# - Storage-Revision is increased
PUT {{service}}/books HTTP/1.0
Storage: {{storage_put_element}}
Accept-Effects: ALL
Content-Type: application/xml

<chapter title="Chapter-X-A">
  <text title="Text X1"/>
  <text title="Text X2"/>
  <text title="Text X3"/>
</chapter>
<chapter title="Chapter-X-B">
  <text title="Text X4"/>
  <text title="Text X5"/>
  <text title="Text X6" ___uid="KIC2D3GJ1DWE:35" ___rev="5">
    Text
    <!-- Comment -->
    Text
    <a><b></b></a>
  </text>
</chapter>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "713fc449d7742bbfc6b0ba90876f7006");
});
%}

###
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID-A, 2x UID-D, 1x UID-M
# - Storage-Revision is increased
# - Storage: text title="Text X6" includes only <test/>, comments and text were deleted
PUT {{service}}/books/chapter%5B2%5D/text%5B3%5D HTTP/1.0
Storage: {{storage_put_element}}
Accept-Effects: ALL
Content-Type: application/xml

<test/>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "cf8e1d00a6b36a32f6250d002b4cb1b4");
});
%}

###
