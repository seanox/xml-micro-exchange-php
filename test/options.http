# Test sequence for OPTIONS requests

# OPTIONS is used to request the functions to an XPath, which is responded
# with the Allow header.
# This method distinguishes between XPath axis and XPath function and uses
# different Allow headers. Also the existence of the target on an XPath
# axis has an influence on the response. The method will not use status
# 404 in relation to non-existing targets, but will offer the methods
# CONNECT, OPTIONS, PUT via Allow-Header.
# If the XPath is a function, it is executed and thus validated, but
# without returning the result.
# The XPath processing is strict and does not accept unnecessary spaces.
# Faulty XPath will cause the status 400.

###
# Storage is not establish 
# Expectations:
# - Status code 404 Resource Not Found
OPTIONS {{service}}/books HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "82acd1ca2eb23624b1b6d4ed193ee0bc");
});
%}

###
# CORS preflight OPTIONS
# Expectations:
# - Status code 204 No Content
# - Access-Control-Allow-Origin: *
# - Access-Control-Allow-Credentials: true
# - Access-Control-Max-Age: 86400
OPTIONS {{service}} HTTP/1.0
Origin: {{origin}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "4fd2e5fb62c0de107edabc8f582fabe1");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 201 Resource Created
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "c820d7781abbbcb14d7f281e498a44d2");
});
%}

###
# Initial request to establish an existing storage
# Expectations:
# - Status code 204 No Content
OPTIONS {{service}} HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "cc4e84a562bd3d60b8c78443c9085b90");
});
%}

###
# Initial request to establish the storage
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 39x UID-A 1x UID-M
PUT {{service}}/books HTTP/1.0
Storage: {{storage_options}}
Content-Type: application/xml

<book title="A1">
  <chapter title="Chapter A1-1">
    <paragraph title="Paragraph A1-1-1"/>
    <paragraph title="Paragraph A1-1-2"/>
    <paragraph title="Paragraph A1-1-3"/>
  </chapter>
  <chapter title="Chapter A1-2">
    <paragraph title="Paragraph A1-2-1"/>
    <paragraph title="Paragraph A1-2-2"/>
    <paragraph title="Paragraph A1-2-3"/>
  </chapter>
  <chapter title="Chapter A1-3">
    <paragraph title="Paragraph A1-3-1"/>
    <paragraph title="Paragraph A1-3-2"/>
    <paragraph title="Paragraph A1-3-3"/>
  </chapter>
</book>
<book title="B1">
  <chapter title="Chapter B1-1">
    <paragraph title="Paragraph B1-1-1"/>
    <paragraph title="Paragraph B1-1-2"/>
    <paragraph title="Paragraph B1-1-3"/>
  </chapter>
  <chapter title="Chapter B1-2">
    <paragraph title="Paragraph B1-2-1"/>
    <paragraph title="Paragraph B1-2-2"/>
    <paragraph title="Paragraph B1-2-3"/>
  </chapter>
  <chapter title="Chapter B1-3">
    <paragraph title="Paragraph B1-3-1"/>
    <paragraph title="Paragraph B1-3-2"/>
    <paragraph title="Paragraph B1-3-3"/>
  </chapter>
</book>
<book title="C1">
  <chapter title="Chapter C1-1">
    <paragraph title="Paragraph C1-1-1"/>
    <paragraph title="Paragraph C1-1-2"/>
    <paragraph title="Paragraph C1-1-3"/>
  </chapter>
  <chapter title="Chapter C1-2">
    <paragraph title="Paragraph C1-2-1"/>
    <paragraph title="Paragraph C1-2-2"/>
    <paragraph title="Paragraph C1-2-3"/>
  </chapter>
  <chapter title="Chapter C1-3">
    <paragraph title="Paragraph C1-3-1"/>
    <paragraph title="Paragraph C1-3-2"/>
    <paragraph title="Paragraph C1-3-3"/>
  </chapter>
</book>

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "52cab11f701a1c0b20095ac8e67ea45e");
});
%}

###
# XPath axis addresses the document and thus has a usable target
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects header
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
# - URI: /
OPTIONS {{service}}2f HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "0f94637eb5c4b733df29f37a4e6a2a09");
});
%}

###
# XPath axis without usable target
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
# - URI: //
OPTIONS {{service}}2f2f HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "afac6af69f503c7eca9897ae907a018a");
});
%}

###
# XPath axis with a usable target
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
OPTIONS {{service}}/books HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "ac8730e7fc554bcdfea679eb162951fc");
});
%}

###
# XPath axis with a usable target
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 9x UID
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
# - URI: (/books)//chapter
OPTIONS {{service}}282f626f6f6b73292f2f63686170746572 HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "8b2a875119ba2ac32586735c3c3adb52");
});
%}

###
# XPath axis with a usable target
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 27x UID
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
# - URI: (/books)//paragraph
OPTIONS {{service}}282f626f6f6b73292f2f706172616772617068 HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "85a62b7c5a89d27ccb2ba1b45fde34a7");
});
%}

###
# XPath axis with a usable target
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 3x UID
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
OPTIONS {{service}}/books/book HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "96957397d69c0e87741a4021793e7db0");
});
%}

###
# XPath axis with a usable target
# Expectations:
# - Status code 204 No Content
# - Without Storage-Effects header
# - Allow: CONNECT, OPTIONS, PUT
OPTIONS {{service}}/books/book/new/new HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "90bcea024fa441795c1fe59b97485a6f");
});
%}

###
# XPath function has no effects
# Expectations:
# - Status code 204 No Content
# - Allow: CONNECT, OPTIONS, GET, POST
OPTIONS {{service}}name(/books) HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "0a99f88b2cbb39d5dd8f2b42991677f3");
});
%}

###
# Wrong XPath function has no effects
# Because XPath functions are not evaluated or validated via OPTIPONS.
# The request checks more whether it can be processed.
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath function (Unregistered function)
OPTIONS {{service}}wrong(/books) HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "a112fdb5a8fdfc0317f70aceecd5067e");
});
%}

###
# XPath axis with a target attribute
# Expectations:
# - Status code 204 No Content
# - Storage-Effects: 1x UID
# - Allow: CONNECT, OPTIONS, GET, POST, PUT, PATCH, DELETE
OPTIONS {{service}}/books/book%5B1%5D/@title HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "79d5dac03d363fd372e880f62a2807d7");
});
%}

###
# XPath axis without a target attribute
# Expectations:
# - Status code 204 No Content
# - Allow: CONNECT, OPTIONS, PUT
OPTIONS {{service}}/books/book%5B1%5D/@titlex HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "5304ac45d6490dd04caa13632064102d");
});
%}

###
# Invalid XPath /books/book[1]x
# Expectations:
# - Status code 400 Bad Request
# - Message: Invalid XPath axis (Invalid expression)
OPTIONS {{service}}/books/book%5B1%5Dx HTTP/1.0
Storage: {{storage_options}}

> {%
client.test("unittest", function() {
    client.assert(response.headers.valueOf("Trace-Composite-Hash") === "b9067682762cfe8d2e1de8721f5b7642");
});
%}

###
